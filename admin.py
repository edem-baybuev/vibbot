from aiogram import F, Router, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
import db
from db import db_pool
import logging


admin_router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã üìÖ")],
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç—É üìÖ")]
    ],
    resize_keyboard=True
)

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await db.is_admin(message.from_user.id):
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb)

@admin_router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if not await db.is_admin(message.from_user.id):
        return
        
    try:
        stats = await db.get_stats()
        gift_stats = await db.get_today_gift_stats()
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {stats['active_users']}\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π /gift —Å–µ–≥–æ–¥–Ω—è: {gift_stats['used']}/{gift_stats['limit']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {gift_stats['users_count']}"
        )
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

class BroadcastStates(StatesGroup):
    waiting_for_message = State()

@admin_router.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: Message, state: FSMContext):
    if not await db.is_admin(message.from_user.id):
        return
    await state.set_state(BroadcastStates.waiting_for_message)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]],
            resize_keyboard=True
        )
    )

@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", BroadcastStates.waiting_for_message)
async def cancel_broadcast(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_kb)

@admin_router.message(BroadcastStates.waiting_for_message)
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    user_ids = await db.get_all_user_ids()
    
    success = 0
    failed = 0
    
    progress_msg = await message.answer("üîÑ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞...")
    
    for user_id in user_ids:
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
            if success % 10 == 0:
                await progress_msg.edit_text(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
                
        except Exception as e:
            failed += 1
            
        await asyncio.sleep(0.1)
    
    await progress_msg.delete()
    await state.clear()
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=admin_kb
    )
async def log_broadcast(admin_id: int, message: str, success: int, failed: int):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO broadcasts 
                (admin_id, message, success_count, failed_count)
                VALUES (%s, %s, %s, %s)
            """, (admin_id, message, success, failed))
            await conn.commit()