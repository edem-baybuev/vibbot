import os
import logging
import asyncio
import aiomysql
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import F
from aiogram.types import BotCommand, Message
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter

from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from openai import AsyncOpenAI
from db import save_event
from db import get_user_events
from db import init_db_pool
from daily_reminder import daily_reminder_task
import db 
from admin import admin_router
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=os.getenv('TELEGRAM_TOKEN'))
openai_client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv('OPENROUTER_API_KEY'),  # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –≤ .env
)
dp = Dispatcher(storage=MemoryStorage())

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    event = State()
    gift_advice = State()
   


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

add_date_back_to_menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[

        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã üìÖ")],
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç—É üìÖ")]
    ],
    resize_keyboard=True
)

continue_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ï—â—ë –¥–∞—Ç—É ‚ûï", callback_data="add_more"),
            InlineKeyboardButton(text="–í—Å—ë –≥–æ—Ç–æ–≤–æ ‚úÖ", callback_data="finish"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É ‚úèÔ∏è", callback_data="edit_last")
        ]
    ]
)
edit_date_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
)
from db import update_user_event  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

@dp.callback_query(lambda c: c.data == 'edit_last')
async def edit_date(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    events = await get_user_events(user_id)
    if not events:
        await callback.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    last_event = events[-1]
    await state.set_state(Form.event)
    await state.update_data(editing_event_id=last_event['id'])

    await callback.message.edit_text(
        f"–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å–æ–±—ã—Ç–∏–µ:\nüìÖ {last_event['event_date'].strftime('%d.%m.%Y')} - {last_event['event_name']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î–ú–ú–ì–ì–ì–ì –ù–∞–∑–≤–∞–Ω–∏–µ.",
        reply_markup=None
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "add_more")
async def add_more_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú–ì–ì–ì–ì –°–æ–±—ã—Ç–∏–µ")
    await state.set_state(Form.event)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "finish")
async def finish_adding(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_menu_kb)
    await state.clear()
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user = message.from_user
    users_data[user.id] = {"events": [], "username": user.username}
    
    await message.answer(
       f"üïí –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã.\n\n"
    "‚ú® –ú–æ—ë –∫–ª—é—á–µ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:\n"
    "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä—è–º–æ –≤ Telegram ‚Äî —Ç—É–¥–∞, –≥–¥–µ —Ç—ã –∏ —Ç–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å –≤—Ä–µ–º—è!\n\n"
    "üìÖ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
    "1. –û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î–ú–ú–ì–ì–ì–ì</b> –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
    "2. –Ø —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ –≤ —Ç–≤–æ—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n"
    "3. –¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ <u>–≤ —ç—Ç–æ—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</u> —Ä–æ–≤–Ω–æ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n"
    "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>15082025 –Æ–±–∏–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</code>\n\n"
    "üöÄ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
       parse_mode="HTML",
        reply_markup=main_menu_kb
    )

@dp.message(F.text.in_({"–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç—É üìÖ", "/add"}))
async def add_date_start(message: types.Message, state: FSMContext):
    await state.set_state(Form.event)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–î–ú–ú–ì–ì–ì–ì –ù–∞–∑–≤–∞–Ω–∏–µ",
    reply_markup=add_date_back_to_menu_kb)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb)    

@dp.message(Form.event)
async def process_event(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (–º–∞–∫—Å. 10 —Å–æ–±—ã—Ç–∏–π)
        if not await db.check_events_limit(user_id):
            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª—å—à–µ 10 —Å–æ–±—ã—Ç–∏–π.\n"
                "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /delete",
                reply_markup=main_menu_kb
            )
            await state.clear()
            return
        date_str, *event_parts = message.text.split(maxsplit=1)
        if not event_parts:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã!")
            return  # –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –∏ –∂–¥–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        event_name = event_parts[0]
        event_date = datetime.strptime(date_str, "%d%m%Y").date()
        if event_date < datetime.now().date():
            await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return

        data = await state.get_data()
        editing_event_id = data.get("editing_event_id")

        if editing_event_id:
         await update_user_event(
        user_id=message.from_user.id,
        event_id=editing_event_id,
        new_name=event_name,
        new_date=event_date
    )
         await message.answer(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: {event_date.strftime('%d.%m.%Y')} - {event_name}")
        else:
         await save_event(
        user_id=message.from_user.id,
        username=message.from_user.username or "unknown",
        event_name=event_name,
        event_date=event_date
    )
        await message.answer(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {event_date.strftime('%d.%m.%Y')} - {event_name}\n"
        "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
        reply_markup=continue_keyboard
    )

        await asyncio.sleep(300)
        text = message.text.lower()
        if any(keyword in text for keyword in keywords):
        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞
        
         await message.answer(
            "üéÅ –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–ø–æ–º—è–Ω—É–ª –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫? –ù–∞–ø–∏—à–∏ /gift, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π!",
            reply_markup=main_menu_kb  # –∫–Ω–æ–ø–∫–∞ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        )



        await state.clear()
        

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î–ú–ú–ì–ì–ì–ì –°–æ–±—ã—Ç–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
keywords = ["–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ", "–≥–æ–¥–æ–≤—â–∏–Ω–∞", "–ø—Ä–∞–∑–¥–Ω–∏–∫", "—é–±–∏–ª–µ–π", "–ø–æ–¥–∞—Ä–æ–∫", "–¥—Ä", "8 –º–∞—Ä—Ç–∞","14 —Ñ–µ–≤—Ä–∞–ª—è","–¥–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö"]



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift ---
@dp.message(Command('gift'))
async def cmd_gift(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —á–µ—Ä–µ–∑ –ë–î
    if not await db.check_gift_limit(user_id):
        await message.answer("‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    
    await state.set_state(Form.gift_advice)
    await message.answer(
        "üéÅ –†–∞—Å—Å–∫–∞–∂–∏, –∫–æ–º—É –Ω—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫:\n"
        "‚Ä¢ –ö—Ç–æ —ç—Ç–æ (–¥—Ä—É–≥, –ø–∞—Ä—Ç–Ω–µ—Ä, —Ä–æ–¥–∏—Ç–µ–ª—å)\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã/—É–≤–ª–µ—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)\n\n"
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π",
        reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
)
    )

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=None)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)
    await callback.answer()


from collections import defaultdict
from datetime import date

gift_usage_cache = defaultdict(lambda: {'count': 0, 'date': date.today()})

async def reset_daily_limits():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            async with db.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("""
                        UPDATE gift_usage 
                        SET calls_today = 0
                    """)
                    await conn.commit()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


@dp.message(StateFilter(Form.gift_advice))
async def get_gift_advice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—à–µ–ª —Å–ø–æ—Å–æ–± –æ–±—Ö–æ–¥–∞)
    if not await db.check_gift_limit(user_id):
        await message.answer("‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å.")
        await state.clear()
        return
    
    
    wait_msg = await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤...")

    try:
        prompt = (
            f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç: {message.text}\n\n"
            "–î–∞–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "1. [–ù–∞–∑–≤–∞–Ω–∏–µ]\n"
            "- –û–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n\n"
            "... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"
            "–£—á–∏—Ç—ã–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –±—é–¥–∂–µ—Ç."
        )
        
        response = await openai_client.chat.completions.create(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —á–µ—Ç–∫–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        
        clean_response = response.choices[0].message.content.strip()
        
        await wait_msg.delete()
        await message.answer(
            f"üéÅ *–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤:*\n\n{clean_response}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await wait_msg.delete()
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await state.clear()

@dp.message(F.text.in_({"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã üìÖ", "/dates"}))
async def show_dates_handler(message: types.Message, state: FSMContext):
    await state.clear()
    events = await get_user_events(message.from_user.id)
    
    if not events:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º–∏
    dates_list = [f"‚Ä¢ {e['event_date'].strftime('%d.%m.%Y')} - {e['event_name']}" for e in events]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await message.answer(
        "üìÖ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã:\n\n"
        "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É –∑–∞—Ä–∞–Ω–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete.\n\n"
        + "\n".join(dates_list)
    )




class DeleteState(StatesGroup):
    waiting_for_event_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(Command("delete"))
async def start_delete_event(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–î–î–ú–ú–ì–ì–ì–ì –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è`).",
        parse_mode="Markdown"
    )
    await state.set_state(DeleteState.waiting_for_event_text)

@dp.message(DeleteState.waiting_for_event_text)
async def process_delete_event(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–∞—Ç—É –∏ –∏–º—è
    try:
        date_part, name_part = text.split(" ", 1)
        event_date = datetime.strptime(date_part, "%d%m%Y").date()
        event_name = name_part.strip()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–î–î–ú–ú–ì–ì–ì–ì –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è`", parse_mode="Markdown")
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    if db.db_pool is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db.db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "DELETE FROM events WHERE user_id=%s AND event_date=%s AND event_name=%s",
                (user_id, event_date, event_name)
            )
            await conn.commit()
            if cur.rowcount:
                await message.answer("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
            else:
                await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –≤—Å—ë —Ç–æ—á–Ω–æ.")

    await state.clear()


async def setup_bot_commands(bot):
    commands = [
        BotCommand(command="gift", description=" –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"),
        BotCommand(command="dates", description=" –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã"),
        BotCommand(command="add", description=" –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É"),
        BotCommand(command="delete", description=" –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É")
    ]
    await bot.set_my_commands(commands)


async def main():
    await init_db_pool()  # <-- –°–ù–ê–ß–ê–õ–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await setup_bot_commands(bot)
    dp.include_router(admin_router)
    asyncio.create_task(daily_reminder_task(bot))
    asyncio.create_task(reset_daily_limits())  # <-- –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    await dp.start_polling(bot)




if __name__ == '__main__':
    asyncio.run(main())
